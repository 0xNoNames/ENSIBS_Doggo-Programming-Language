/* Generated By:JavaCC: Do not edit this line. Doggo.java */
public class Doggo implements DoggoConstants {
    public static void main(String args[]) throws ParseException {
        Doggo parser;
        if (args.length==0) {
            System.out.println("Entr\u00c3\u00a9e standard");
            parser = new Doggo(System.in);
        }
        else if (args.length==1) {
            System.out.println("Analyse du fichier : " + args[0] + "...");
            try {
                parser = new Doggo(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("Le fichier :" + args[0] + " n'existe pas...");
                return;
            }
        }
        else {
            System.out.println("Erreur de lecture");
            return;
        }
        try {

            // Lance l'amorçage (avec la 1ère règle)
            parser.programme();
            System.out.println("Analyse syntaxique OK");
            // pw.close();
            // try {
            //     // fichierJava.close();
            // }
            // catch (java.io.IOException e) {}
        } catch (ParseException e) {
            System.out.println(e);
            System.out.println("L'analyse syntaxique r\u00c3\u00a9v\u00c3\u00a8le des erreurs");
        }
    }

  static final public void programme() throws ParseException {
    enTete();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_2(2)) {
        fonction();
      } else if (jj_2_3(2)) {
        procedure();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    principale();
  }

  static final public void enTete() throws ParseException {
    jj_consume_token(PROGRAMME);
    jj_consume_token(IDENTIFIANT);
  }

  static final public void fonction() throws ParseException {
    jj_consume_token(FONCTION);
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(32);
    if (jj_2_5(2)) {
      jj_consume_token(TYPE);
      jj_consume_token(IDENTIFIANT);
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(33);
        jj_consume_token(TYPE);
        jj_consume_token(IDENTIFIANT);
      }
    } else {
      ;
    }
    jj_consume_token(34);
    declaration();
    jj_consume_token(DEBUT);
    blocInstruction();
    jj_consume_token(RETOUR);
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(35);
    jj_consume_token(FIN);
  }

  static final public void procedure() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(32);
    if (jj_2_7(2)) {
      jj_consume_token(TYPE);
      jj_consume_token(IDENTIFIANT);
      label_3:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(33);
        jj_consume_token(TYPE);
        jj_consume_token(IDENTIFIANT);
      }
    } else {
      ;
    }
    jj_consume_token(34);
    declaration();
    jj_consume_token(DEBUT);
    blocInstruction();
    jj_consume_token(FIN);
  }

  static final public void principale() throws ParseException {
    jj_consume_token(PRINCIPALE);
    declaration();
    jj_consume_token(DEBUT);
    blocInstruction();
    jj_consume_token(FIN);
  }

  static final public void blocInstruction() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_9(2)) {
        affectation();
      } else if (jj_2_10(2)) {
        affichage();
      } else if (jj_2_11(2)) {
        ecriture();
      } else if (jj_2_12(2)) {
        boucle();
      } else if (jj_2_13(2)) {
        conditionnelle();
      } else if (jj_2_14(2)) {
        operateurIncrDecr();
      } else if (jj_2_15(2)) {
        appel();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void affichage() throws ParseException {
    jj_consume_token(AFFICHER);
    jj_consume_token(32);
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(34);
    jj_consume_token(35);
  }

  static final public void ecriture() throws ParseException {
    jj_consume_token(ECRITURE);
    jj_consume_token(32);
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(34);
    jj_consume_token(35);
  }

  static final public void operateurIncrDecr() throws ParseException {
    jj_consume_token(IDENTIFIANT);
    if (jj_2_16(2)) {
      jj_consume_token(INCREMENT);
    } else if (jj_2_17(2)) {
      jj_consume_token(DECREMENT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(35);
  }

  static final public void boucle() throws ParseException {
    jj_consume_token(BOUCLE_TANT_QUE);
    expression();
    jj_consume_token(BOUCLE_FAIRE);
    blocInstruction();
    jj_consume_token(BOUCLE_FAIT);
  }

  static final public void conditionnelle() throws ParseException {
    jj_consume_token(SICOND_SI);
    expression();
    jj_consume_token(SICOND_ALORS);
    blocInstruction();
    jj_consume_token(SICOND_FIN_SI);
  }

  static final public void declaration() throws ParseException {
    label_5:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(TYPE);
      jj_consume_token(IDENTIFIANT);
      jj_consume_token(SIGNE_AFFECTER);
      expression();
      jj_consume_token(35);
    }
  }

  static final public void affectation() throws ParseException {
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(SIGNE_AFFECTER);
    expression();
    jj_consume_token(35);
  }

  static final public void expression() throws ParseException {
    expression1();
    if (jj_2_19(2)) {
      jj_consume_token(36);
      expression1();
    } else {
      ;
    }
  }

  static final public void expression1() throws ParseException {
    expression2();
    if (jj_2_20(2)) {
      jj_consume_token(37);
      expression2();
    } else {
      ;
    }
  }

  static final public void expression2() throws ParseException {
    if (jj_2_21(2)) {
      jj_consume_token(38);
      expression3();
    } else if (jj_2_22(2)) {
      expression3();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression3() throws ParseException {
    expression4();
    if (jj_2_29(2)) {
      if (jj_2_23(2)) {
        jj_consume_token(39);
      } else if (jj_2_24(2)) {
        jj_consume_token(40);
      } else if (jj_2_25(2)) {
        jj_consume_token(41);
      } else if (jj_2_26(2)) {
        jj_consume_token(42);
      } else if (jj_2_27(2)) {
        jj_consume_token(43);
      } else if (jj_2_28(2)) {
        jj_consume_token(44);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression4();
    } else {
      ;
    }
  }

  static final public void expression4() throws ParseException {
    expression5();
    if (jj_2_32(2)) {
      if (jj_2_30(2)) {
        jj_consume_token(45);
      } else if (jj_2_31(2)) {
        jj_consume_token(46);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression5();
    } else {
      ;
    }
  }

  static final public void expression5() throws ParseException {
    expression6();
    if (jj_2_35(2)) {
      if (jj_2_33(2)) {
        jj_consume_token(47);
      } else if (jj_2_34(2)) {
        jj_consume_token(48);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression6();
    } else {
      ;
    }
  }

  static final public void expression6() throws ParseException {
    expression7();
    if (jj_2_36(2)) {
      jj_consume_token(49);
      expression7();
    } else {
      ;
    }
  }

  static final public void expression7() throws ParseException {
    if (jj_2_37(2)) {
      expression8();
    } else if (jj_2_38(2)) {
      jj_consume_token(46);
      expression8();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression8() throws ParseException {
    if (jj_2_39(2)) {
      jj_consume_token(IDENTIFIANT);
    } else if (jj_2_40(2)) {
      valeur();
    } else if (jj_2_41(2)) {
      appel();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valeur() throws ParseException {
    if (jj_2_42(2)) {
      jj_consume_token(VALEUR_ENTIER);
    } else if (jj_2_43(2)) {
      jj_consume_token(46);
      jj_consume_token(VALEUR_ENTIER);
    } else if (jj_2_44(2)) {
      jj_consume_token(45);
      jj_consume_token(VALEUR_ENTIER);
    } else if (jj_2_45(2)) {
      jj_consume_token(VALEUR_FLOTANT);
    } else if (jj_2_46(2)) {
      jj_consume_token(46);
      jj_consume_token(VALEUR_FLOTANT);
    } else if (jj_2_47(2)) {
      jj_consume_token(45);
      jj_consume_token(VALEUR_FLOTANT);
    } else if (jj_2_48(2)) {
      jj_consume_token(VALEUR_CHAINE);
    } else if (jj_2_49(2)) {
      jj_consume_token(VALEUR_BOOLEEN);
    } else if (jj_2_50(2)) {
      jj_consume_token(32);
      expression();
      jj_consume_token(34);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void appel() throws ParseException {
    jj_consume_token(IDENTIFIANT);
    jj_consume_token(32);
    if (jj_2_52(2)) {
      jj_consume_token(IDENTIFIANT);
      label_6:
      while (true) {
        if (jj_2_51(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(50);
        jj_consume_token(IDENTIFIANT);
      }
    } else {
      ;
    }
    jj_consume_token(34);
    jj_consume_token(35);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(VALEUR_CHAINE)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(IDENTIFIANT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(SICOND_SI)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(VALEUR_ENTIER)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(BOUCLE_TANT_QUE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIANT)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(VALEUR_FLOTANT)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ECRITURE)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(VALEUR_ENTIER)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(AFFICHER)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(VALEUR_FLOTANT)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(VALEUR_FLOTANT)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(FONCTION)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(VALEUR_BOOLEEN)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(VALEUR_ENTIER)) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(50)) return true;
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIANT)) return true;
    if (jj_scan_token(SIGNE_AFFECTER)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIANT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DoggoTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[52];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Doggo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Doggo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DoggoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Doggo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DoggoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Doggo(DoggoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DoggoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 52; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
