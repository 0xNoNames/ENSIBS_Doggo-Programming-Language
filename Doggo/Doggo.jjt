 options {
  MULTI=true;
  JAVA_UNICODE_ESCAPE = true;
//   VISITOR=true;
//   NODE_DEFAULT_VOID=true;
//   NODE_EXTENDS="BaseNode";
}
PARSER_BEGIN(Doggo)
public class Doggo {    
    public static void main(String args[]) throws ParseException {
        Doggo parser;
        if (args.length == 0) {
            System.out.println("Entrée standard");
            parser = new Doggo(System.in);
        }
        else if (args.length == 1) {
            System.out.println("Analyse du fichier : " + args[0] + "...");
            try {
                parser = new Doggo(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("Le fichier :" + args[0] + " n'existe pas...");
                return;
            }
        }
        else {
            System.out.println("Erreur de lecture");
            return;
        }
        try {
            
            // Lance l'amorçage (avec la 1ère règle)
            parser.programme();
            System.out.println("Analyse syntaxique OK");
        } catch (ParseException e) {
            System.out.println(e);
            System.out.println("L'analyse syntaxique révèle des erreurs");
        }
    }
}
PARSER_END(Doggo)

SKIP:
    {
        " "
        | "\t"
        | "\n"
        | "\r"
        | "\f"
    }

SPECIAL_TOKEN:
    {
        <COMMENTAIRES: "$" (["a"-"z","A"-"Z","0"-"9", " "]) * "$">
    }

TOKEN:
    {
        <PROGRAMME : "programme">
        | <FONCTION : "fonction">
        | <PROCEDURE : "procedure">
        | <PRINCIPALE : "principale">
        | <DEBUT : "debut">
        | <RETOUR : "retour">
        | <FIN : "fin">
        | <ECRITURE : "ecrire">
        | <AFFICHER : "afficher">
        | <SICOND_SI : "si">
        | <SICOND_ALORS : "alors">
        | <SICOND_FIN_SI : "fin si">
        | <SICOND_SINON : "sinon">
        | <BOUCLE_TANT_QUE : "tant que">
        | <BOUCLE_FAIRE : "faire">
        | <BOUCLE_FAIT : "fait">
        | <INCREMENT : "++">
        | <DECREMENT : "--">
    }

TOKEN:
    {
    <TYPE : "entier" | "chaine" | "flottant" | "booleen">
    | <IDENTIFIANT : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"]) *>
    | <SIGNE_AFFECTER : ":=">
    | <VALEUR_ENTIER : (["0"-"9"]) *>
    | <VALEUR_FLOTANT : <VALEUR_ENTIER>"."<VALEUR_ENTIER>>
    | <VALEUR_CHAINE : "\"" (["a"-"z","A"-"Z","0"-"9"]) * "\"">
    | <VALEUR_BOOLEEN : "Vrai" | "Faux">
    }

/** Main JJTree */
// ASTStart start() #start : {}
// {
//   programme()
//   { return jjtThis; }
// }

void programme(): //#programme:
    {}
    {
        <PROGRAMME> <IDENTIFIANT>
        (fonction() | procedure())*
        principale()
    }

void fonction():
    {}
    {
        <FONCTION> <TYPE> <IDENTIFIANT>"("(<TYPE> <IDENTIFIANT> ("," <TYPE> <IDENTIFIANT>)*)?")"
        declaration()
        <DEBUT>
        blocInstruction()
        <RETOUR> <IDENTIFIANT>";"
        <FIN>
    }

void procedure():
    {}
    {
        <PROCEDURE> <IDENTIFIANT>"("(<TYPE> <IDENTIFIANT> ("," <TYPE> <IDENTIFIANT>)*)?")"
        declaration()
        <DEBUT>
        blocInstruction()
        <FIN>
    }

void principale():
    {}
    {
        <PRINCIPALE>
        declaration()
        <DEBUT>
        blocInstruction()
        <FIN>
    }

void blocInstruction():
    {}
    {
        (affectation() | affichage() | ecriture() | boucle() | conditionnelle() | operateurIncrDecr() | appel())*
    }

void affichage():
    {}
    {
        <AFFICHER>"("<IDENTIFIANT>")"";"
    }

void ecriture():
    {}
    {
        <ECRITURE>"("<IDENTIFIANT>")"";"
    }

void operateurIncrDecr():
    {}
    {
        <IDENTIFIANT>(<INCREMENT>|<DECREMENT>)";"
    }

void boucle():
    {}
    {
        <BOUCLE_TANT_QUE> exprEt() <BOUCLE_FAIRE>
        blocInstruction()
        <BOUCLE_FAIT>
    }

void conditionnelle():
    {}
    {
        <SICOND_SI> exprEt() <SICOND_ALORS>
        blocInstruction()
        <SICOND_FIN_SI>
    }

void declaration():
    {}
    {
        (<TYPE> <IDENTIFIANT> <SIGNE_AFFECTER> exprEt()";")*
    }

void affectation():
    {}
    {
        <IDENTIFIANT> <SIGNE_AFFECTER> exprEt()";"
    }

void exprEt():
    {}
    {
        exprOu() ("et" exprOu())?
    }

void exprOu():
    {}
    {
        exprNon() ("ou" exprNon())?
    }

void exprNon():
    {}
    {
        "non" exprBooleene() | exprBooleene()
    }

void exprBooleene():
    {}
    {
        exprAddSous() (("=" | "<>" | ">" | ">=" | "<" | "<=") exprAddSous())?
    }

void exprAddSous():
    {}
    {
        exprMulDiv() (("+" | "-") exprMulDiv())?
    }

void exprMulDiv():
    {}
    {
        exprPuissance() (("*" | "/") exprPuissance())?
    }

void exprPuissance():
    {}
    {
        exprNegatif() (("^") exprNegatif())?
    }

void exprNegatif():
    {}
    {
        expression() | ("-" expression())
    }

void expression():
    {}
    {
        <IDENTIFIANT> | valeur() | appel()
    }

void valeur():
    {}
    {
        <VALEUR_ENTIER> | "-"<VALEUR_ENTIER> | "+"<VALEUR_ENTIER> | <VALEUR_FLOTANT> | "-"<VALEUR_FLOTANT> | "+"<VALEUR_FLOTANT> | <VALEUR_CHAINE> | <VALEUR_BOOLEEN> | "("exprEt()")"
    }

void appel():
    {}
    {
        <IDENTIFIANT>"(" (<IDENTIFIANT>(", " <IDENTIFIANT>)*)?")"";" 
    }